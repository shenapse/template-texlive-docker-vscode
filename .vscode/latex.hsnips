// `_`: snippet argument, T: trigger key needed



//-------------------------------------- 
//			  context def			   |
//--------------------------------------

global
function math(context) {
    return context.scopes.some(s => s.startsWith("meta.math")) && !context.scopes.some(s => s.startsWith("comment") || s.startsWith("meta.text.normal.tex"));
}
endglobal

global
function text(context) {
    return !context.scopes.some(s => s.startsWith("meta.math") || s.startsWith("meta.embedded") || s.startsWith("source"));
}
endglobal

//-------------------------------------- 
//			  Environment			   |
//--------------------------------------

// ;; -> \(  \) 
snippet ;; "math inline" A
\( $1 \) $0
endsnippet

// A;; -> \( A \)
snippet `([\\a-zA-Z]+);;` "convert math inline" A
`` rv = `\\( ${m[1]} \\)` ``
endsnippet

// Mp34xb -> 3x4 pMatrix with all components equal to x
// Mp -> \begin{pMatrix}
// Mb -> \begin{pMatrix} etc.
// the last variable [bn] specifies output style. 
context math(context)
snippet `M([\ pbvBV])(\d)(\d)(.)([bn])` "Matrix" A
``
type = m[1] === ' ' ? '' : m[1]
n = 1
res = `\\begin{${type}matrix}`
res += m[5] == "b" ? "\n" : ''
for (let i = 0; i < m[2]; i++) {
	for (let j = 0; j < m[3]; j++) {
		res += snip.tabstop(n++, m[4])
		if (j + 1 != m[3]) {
			res += " & "
		} else {
			if (i + 1 != m[2]) {
				res += "\\\\\\\\"
			}
			res += m[5] == "b" ? "\n" : ''
		}
	}
}
res += `\\end{${type}matrix}`
rv = res
``
endsnippet

// lr) -> \left(  \right)
// and similarly for ]>}vV
// v and V correspond to vert and Vert
context math(context)
snippet `lr([\)\]\>\}vV])` "Left-right" A
`` trans = {")": ["(", ")"], "]": ["[", "]"], ">": ["<", ">"], "}": ["{", "}"], "v": ["\\lvert", "\\rvert"], "V": ["\\lVert", "\\rVert"]}
rv = `\\left${trans[m[1]][0]} ${snip.tabstop(1)} \\right${trans[m[1]][1]}` ``
endsnippet

//-------------------------------------- 
//			   Character			   |
//--------------------------------------

// za -> \alpha
// zG -> Gamma
context math(context)
snippet `(?<![\\a-zA-Z])z([a-zA-Z])(?![a-zA-Z])` "Greek letter" A
`` trans = {"a": "\\alpha", "b": "\\beta", "g": "\\gamma", "G": "\\Gamma", "d": "\\delta", "D": "\\Delta", "e": "\\epsilon", "E": "\\varepsilon", "z": "\\zeta", "h": "\\eta", "t": "\\theta", "T": "\\Theta", "k": "\\kappa", "i": "\\iota", "l": "\\lambda", "L": "\\Lambda", "m": "\\mu", "n": "\\nu", "x": "\\xi", "X": "\\Xi", "p": "\\pi", "P": "\\Pi", "r": "\\rho", "s": "\\sigma", "S": "\\Sigma", "o": "\\omega", "O": "\\Omega", "c": "\\chi", "f": "\\phi", "F": "\\varphi", "y": "\\upsilon", "Y": "\\Upsilon", "v": "\\psi", "V": "\\Psi", "u": "\\tau" }
rv = (trans[m[1]] || ("z" + m[1])) ``
endsnippet

// R# -> \mathbb{R}
context math(context)
snippet `\b([A-Z])#` "Math bb" A
`` rv = `\\mathbb{${m[1]}}` ``
endsnippet

// Acal -> \mathcal{A}
context math(context)
snippet `\b([A-Z])cal` "Math cal" A
`` rv = `\\mathbb{${m[1]}}` ``
endsnippet

// A@ -> \mathscr{A}
context math(context)
snippet `\b([A-Z])@` "Math scr" A
`` rv = `\\mathscr{${m[1]}}` ``
endsnippet

// adding # transforms mathbb -> mathcal -> mathscr -> mathbb

// mathbb + # -> mathcal
context math(context)
snippet `\\mathbb{([A-Z])}#` "mathbb -> mathcal" A
`` rv = `\\mathcal{${m[1]}}` ``
endsnippet

// \mathcal + # -> mathscr
context math(context)
snippet `\\mathcal{([A-Z])}#` "mathcal -> mathscr" A
`` rv = `\\mathscr{${m[1]}}` ``
endsnippet

// \mathscr + # -> mathbb
context math(context)
snippet `\\mathscr{([A-Z])}#` "mathscr -> mathbb" A
`` rv = `\\mathbb{${m[1]}}` ``
endsnippet

// \mathbb{R}+ -> \mathbb{R}_+
context math(context)
snippet `(\\mathbb{[A-Z]})(_[+-])?(\^\*)?([+-])` "Math bb +/- modifier" A
`` rv = m[1] + "_" + m[4] + (m[3] || "") ``
endsnippet

// \mathbb{R}* -> \mathbb{R}^*
context math(context)
snippet `(\\mathbb{[A-Z]})(_[+-])?\*` "Math bb * modifier" A
`` rv = m[1] + (m[2] || "") + "^*" ``
endsnippet

//-------------------------------------- 
//			   Shortcut				   |
//--------------------------------------

// not in -> \notin
// priority is needed to win "\not \in"
// place before snippet in -> \in 
context math(context)
priority 2
snippet `\\not\s(in|ni)` "Not in Not ni" A
`` rv = `\\not${m[1]} ` ``
endsnippet

// \sim + eq -> \simeq
context math(context)
priority 2
snippet `\b(?<=\\)(sim|subset|supset|succ|prec)\s{1,2}(neq|eq)` "\\commands + (n)eq" A
``rv = `${m[1]}${m[2]}` ``
endsnippet

// ker -> \ker
context math(context)
priority 1
snippet `\b(?<!\\)(?<!\\mathrm\{)(le|ge|to|not|in|dim|deg|ker|det|arg|max|min|sin|cos|tan|cot|ln|log|exp|perp|cup|cap|sim|pm|iff|mid|Im|Re|succ|prec|circ|neq|ni|lim|sum|prod)` "Commands space" A
`` rv = `\\${m[1]} ` ``
endsnippet

// bar -> \bar{}
context math(context)
snippet `\b(?<!\\)(?<!\\mathrm\{)(bar|dot|hat|abs|norm|adj|sqrt)` "Commands with argument" A
`` rv = `\\${m[1]}{${snip.tabstop(1)}} ${snip.tabstop(2)}` ``
endsnippet

// imp ->  \implies
context math(context)
snippet `\b(?<!\\)(?<!\\mathrm\{)(imp|imb|uuto|ddto|ssb|ssp|sbn|stm|app|oo|mpt|ee|fa|xx|oxx|lra|Lra|dint)` "Short for Commands" A
`` trans = {"imp": "\\implies", "imb":"\\impliedby", "uuto": "\\upuparrows","ddto": "\\downdownarrows", "ssb": "\\subset", "ssp": "\\supset", "stm": "\\setminus", "app": "\\approx", "oo": "\\infty", "mpt":"\\mapto", "ee": "\\exists", "fa": "\\forall", "xx": "\\times", "oxx": "\\otimes","lra":"\\leftrightarrow", "Lra":"\\Leftrightarrow", "dint":"\\int"}
rv = `${trans[m[1]]} ` ``
endsnippet

// xto -> \xrightarrow{}
context math(context)
snippet `\b(?<!\\)(?<!\\mathrm\{)(xto|xot|ovl|ope|mrm|tit|tbf)` "Short for Commands with argument" A
`` trans = {"xto": "\\xrightarrow", "xot": "\\xleftarrow", "ovl": "\\overline","ope": "\\interior", "mrm":"\\mathrm", "tit":"\\textit", "tbf":"\\textbf"}
rv = `${trans[m[1]]}{${snip.tabstop(1)}} ${snip.tabstop(2)}` ``
endsnippet

// ff -> frac{}{}
context math(context)
snippet `\b(?<!\\)(?<!\\mathrm\{)(uset|oset|ff)` "Short for Commands with two argument" A
`` trans = {"uset": "\\underset", "oset": "\\overset", "ff": "\\frac"}
rv = `${trans[m[1]]}{${snip.tabstop(1)}}{${snip.tabstop(2)}} ${snip.tabstop(3)}` ``
endsnippet

// asin -> \arcsin {}
context math(context)
snippet `\b(?<!\\)a(sin|cos|tan)` "Arc-trigo" A
`` rv = `\\arc${m[1]} {${snip.tabstop(1)}} ${snip.tabstop(2)}` ``
endsnippet

//-------------------------------------- 
//	    subscript and superscript	   |
//--------------------------------------

// x__ -> x_{} 
context math(context)
snippet __ "Subscript" iA
_{$1} $0
endsnippet

// xsq -> x^2
context math(context)
snippet sq "Square" A
^2
endsnippet

context math(context)
snippet cb "Cube" A
^3
endsnippet

// x inv -> x^{-1}
context math(context)
snippet `\s*?\\in\s?v` "Inverse" iA
^{-1}
endsnippet

// x^^ -> x^{}
// x-- -? x^{}
context math(context)
snippet `--|\^\^` "Superscript" A
^{$1} $0
endsnippet

// x1 -> x_1
context math(context)
snippet `(\B\\[A-Za-z]+|\b\d*[A-Za-z])(\d)` "Auto subscript" A
`` rv = m[1] + "_" + m[2] ``
endsnippet

// x11 -> x_{11}
context math(context)
snippet `(\B\\[A-Za-z]+|\b\d*[A-Za-z])_(\d\d)` "Auto subscript 2" A
`` rv = `${m[1]}_{${m[2]}}` ``
endsnippet

// xNN -> x_n
context math(context)
snippet `(\B\\[A-Za-z]+|\b\d*[A-Za-z])([A-Z])\2` "a_k" A
`` rv = `${m[1]}_${m[2].toLowerCase()}` ``
endsnippet

// xIImk -> x_{i-k}
// xIIpk -> x_{i+k}
context math(context)
priority 2
snippet `(\B\\[A-Za-z]+|\b\d*[A-Za-z])_([0-9a-zA-Z\_\{\}\-\+\*])(m|p)([0-9a-z])` "_{k-d}" A
`` trans = {"m": "-", "p": "+"}
rv = `${m[1]}_{${m[2]}${trans[m[3]]}${m[4]}}` ``
endsnippet

// convert subscript into superscript, and conversely
// x_{i+1}tt -> x^{i+1}
context math(context)
snippet `(\B\\[A-Za-z]+|\b\d*[\\A-Za-z])(_|\^)([0-9a-zA-Z\\\_\{\}\(\)\-\+\*]+)tt` "x_k -> x^k" A
`` trans = {"_": "^", "^": "_"}
rv = `${m[1]}${trans[m[2]]}${m[3]}` ``
endsnippet

//-------------------------------------- 
//				Dots				   |
//--------------------------------------

// x_{i+1},, -> x_{i+1}, \\cdots, x_{i+1}
context math(context)
snippet `(\B\\[A-Za-z]+|\b\d*[\\A-Za-z])(\_|\^)([0-9a-zA-Z\\\_\{\}\(\)\-\+\*]+),,` "repeat by ldots" wA
`` rv = `${m[1]}${m[2]}${m[3]}, \\ldots, ${m[1]}${m[2]}${m[3]}` ``
endsnippet

// .. -> \ldots
context math(context)
snippet `\b(?<!\\)\.{2}` "Ldots" A
\\ldots
endsnippet

context math(context)
snippet `\b(?<!\\),\.` "Ldots with comma" A
, \\ldots, 
endsnippet

// sd + [dvlc](dot type) -> \\(dot type)dots
// sdc -> \cdots
context math(context)
snippet `\b(?<!\\)sd([dvlc])` "cdots" iA
`` rv = `\\${m[1]}dots` ``
endsnippet

context math(context)
snippet `\b(?<!\\)dc` "cdot" iA
\\cdot 
endsnippet

//-------------------------------------- 
//		      Suggestion			   |
//--------------------------------------

// --------- suggestion on "_" ---------

// \\sum_ -> \\sum_{i=1}^{\infty}
context math(context)
snippet `\\sum\s?_` "Sum" wA
\\sum_{${1:i}=${2:1}}^{${3:\\infty}} 
endsnippet

context math(context)
snippet `\\prods?_` "Product" wA
\\prod_{${1:i}=${2:1}}^{${3:n}} 
endsnippet

context math(context)
snippet `\\lim\s?_` "Limit" wA
\\lim_{${1:x} \\to ${2:\infty}} 
endsnippet

// --------- suggestion on "^" ---------

context math(context)
snippet `\\to\s?\^` "Arrow limit" wA
\\xrightarrow{${1:x} \\to ${2:\infty}} $0
endsnippet

context math(context)
snippet `\\int\s?\^` "Integral" wA
\\int_{${1:-\\infty}}^{${2:\\infty}} 
endsnippet

//-------------------------------------- 
//				  Misc				   |
//--------------------------------------

context math(context)
snippet `\b(?<!\\)dsum|o\+` "direct sum" wA
\\oplus
endsnippet

context math(context)
snippet `\b(?<!\\)emp?t?s` "emptyset" wA
\\emptyset
endsnippet

context math(context)
snippet `\b(?<!\\)ubrace` "underbrace" wA
\\underbrace{$1}_{$2} $0
endsnippet

context math(context)
snippet `\b(?<!\\)obrace` "overbrace" wA
\\overbrace{$1}^{$2} $0
endsnippet

context math(context)
snippet `\b(?<!\\)0z` "Zero set" wA
\\{0\\} 
endsnippet

context math(context)
snippet `\b(?<!\\)qq` "Quad" wA
\\quad 
endsnippet

context math(context)
snippet `\b(?<!\\)dsp` "Displaystyle" wA
\\displaystyle 
endsnippet

// --------- auto fraction and sqrt ---------

context math(context)
snippet `((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\w+\}|\w))*)\/$|(\(((?:\([^()]*\)|[^()])*)\))\/$` "Fraction auto" A
\\frac{`` rv = m[1] || m[10] ``}{$1} $0
endsnippet

context math(context)
snippet `\((((?:\([^()]*\)|[^()])*))\)rt` "Square root auto" A
\\sqrt{`` rv = m[1] ``}
endsnippet

context math(context)
snippet `\\sqrt(?:\[\d\])?\{(.*)\}(\d)` "N root auto / modify N" A
\\sqrt[`` rv = m[2] ``]{`` rv = m[1] ``}
endsnippet

//-------------------------------------- 
//	  Experimental: UTF-characters	   |
//--------------------------------------